{"version":3,"sources":["../../../src/model/transactions/transferTransaction.js"],"names":["prepare","common","tx","network","Error","kp","KeyPair","create","Helpers","fixPrivateKey","privateKey","actualSender","isMultisig","multisigAccount","publicKey","toString","recipientCompressedKey","recipient","amount","Math","round","message","Message","due","Network","data","testnet","id","mosaics","mosaicsFee","entity","_construct","prepareMosaic","mosaicDefinitionMetaDataPair","Fees","calculateMosaics","senderPublicKey","timeStamp","createNEMTimeStamp","version","getVersion","Objects","TransactionTypes","transfer","msgFee","payload","length","calculateMessage","fee","currentFeeFactor","calculateMinimum","totalFee","custom","toUpperCase","replace","extendObj","module","exports"],"mappings":"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","file":"transferTransaction.js","sourcesContent":["import Network from '../network';\nimport Helpers from '../../utils/helpers';\nimport TransactionTypes from '../transactionTypes';\nimport Fees from '../fees';\nimport KeyPair from '../../crypto/keyPair';\nimport Objects from '../objects';\nimport MultisigWrapper from './multisigWrapper';\nimport Message from './message';\n\n/**\n * Prepare a transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - The un-prepared transfer transaction object\n * @param {number} network - A network id\n *\n * @return {object} - A [TransferTransaction]{@link http://bob.nem.ninja/docs/#transferTransaction} object ready for serialization\n */\nlet prepare = function(common, tx, network){\n    if (!common || !tx || !network) throw new Error('Missing parameter !');\n\tlet kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let recipientCompressedKey = tx.recipient.toString();\n    let amount = Math.round(tx.amount * 1000000);\n    let message = Message.prepare(common, tx);\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let mosaics = null;\n    let mosaicsFee = null\n    let entity = _construct(actualSender, recipientCompressedKey, amount, message, due, mosaics, mosaicsFee, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n\n/**\n * Prepare a mosaic transfer transaction object\n *\n * @param {object} common - A common object\n * @param {object} tx - The un-prepared transfer transaction object\n * @param {object} mosaicDefinitionMetaDataPair - The mosaicDefinitionMetaDataPair object with properties of mosaics to send\n * @param {number} network - A network id\n *\n * @return {object} - A [TransferTransaction]{@link http://bob.nem.ninja/docs/#transferTransaction} object ready for serialization\n */\nlet prepareMosaic = function(common, tx, mosaicDefinitionMetaDataPair, network){\n    if (!common || !tx || !mosaicDefinitionMetaDataPair || tx.mosaics === null || !network) throw new Error('Missing parameter !');\n    let kp = KeyPair.create(Helpers.fixPrivateKey(common.privateKey));\n    let actualSender = tx.isMultisig ? tx.multisigAccount.publicKey : kp.publicKey.toString();\n    let recipientCompressedKey = tx.recipient.toString();\n    let amount = Math.round(tx.amount * 1000000);\n    let message = Message.prepare(common, tx);\n    let due = network === Network.data.testnet.id ? 60 : 24 * 60;\n    let mosaics = tx.mosaics;\n    let mosaicsFee = Fees.calculateMosaics(amount, mosaicDefinitionMetaDataPair, mosaics);\n    let entity = _construct(actualSender, recipientCompressedKey, amount, message, due, mosaics, mosaicsFee, network);\n    if (tx.isMultisig) {\n        entity = MultisigWrapper(kp.publicKey.toString(), entity, due, network);\n    }\n    return entity;\n}\n\n/***\n * Create a transfer transaction object\n *\n * @param {string} senderPublicKey - The sender account public key\n * @param {string} recipientCompressedKey - The recipient account public key\n * @param {number} amount - The amount to send in micro XEM\n * @param {object} message - The message object\n * @param {number} due - The deadline in minutes\n * @param {array} mosaics - The array of mosaics to send\n * @param {number} mosaicFee - The fees for mosaics included in the transaction\n * @param {number} network - A network id\n *\n * @return {object} - A [TransferTransaction]{@link http://bob.nem.ninja/docs/#transferTransaction} object\n */\nlet _construct = function(senderPublicKey, recipientCompressedKey, amount, message, due, mosaics, mosaicsFee, network) {\n    let timeStamp = Helpers.createNEMTimeStamp();\n    let version = mosaics ? Network.getVersion(2, network) : Network.getVersion(1, network);\n    let data = Objects.create(\"commonTransactionPart\")(TransactionTypes.transfer, senderPublicKey, timeStamp, due, version);\n    let msgFee = message.payload.length ? Fees.calculateMessage(message) : 0;\n    let fee = mosaics ? mosaicsFee : Fees.currentFeeFactor * Fees.calculateMinimum(amount / 1000000);\n    let totalFee = (msgFee + fee) * 1000000;\n    let custom = {\n        'recipient': recipientCompressedKey.toUpperCase().replace(/-/g, ''),\n        'amount': amount,\n        'fee': totalFee,\n        'message': message,\n        'mosaics': mosaics\n    };\n    let entity = Helpers.extendObj(data, custom);\n    return entity;\n}\n\nmodule.exports = {\n    prepare,\n    prepareMosaic\n}"]}